管道：

	  #include <unistd.h>
	  int pipe(int fd[2]);
	  说明：
		    1) 管道只能用于同一个祖先的进程之间使用； 
		    2) 为了可移植性， 进程应该半双工通信
		    3）fd[0]  : 为读而打开 fd[1] : 为写而打开
	  注意：
		    1) 当读一个写端被关闭的管道时， 所有数据都被读取后， read 返回0 ------------ 表示文件结束
		    2) 如果写一个读段被关闭的管道， 则产生信号 SIGPIPE
		    3) 在写管道时， 常量PIPE_BUF 规定了内核的管道缓冲区的大小
		    
函数 popen 和 pclose

	       #include <stdio.h>
	       FILE * popen(const char *cmdstring, const char *rype);
	       int pclose(FILE * fp);
	       说明：
			 1） 函数 popen 先执行 fork 后调用exec 执行 cmdstring , 并返回标准I/O文件指针
			 2） type 时 "r" 则关联cmdstring 的标准输出 如果 为 “w”则关联标准输入
			 3） pclose 关闭标准 I/O 流并返回终止状态 -------类似于 system
	       注意：
			 在中间不调用 wait 否则 pclose 错误 errno = ECHILD
			 
协同进程:

FILFO --- 命名管道:
	  
	       #include <sys/stat.h>
	       int mkfifl(const char *path, mode_t mode);
	       int mkfifoat(int fd, const char *path, mode_t mode);   
	       
XSI IPC :

     标志符和键：
     
	       说明：
			 1）标志符是 IPC 对象的内部名， 为使多个合作进程能够在同一 IPC 对象上汇聚， 需要提供一个外部命名反感， 为此， 每个IPC 对象都与
			      一个键相关联 将该键作为该对象的外部名
			 2） 键的类型为ket_t 通常在头文件 #include <sys/types.h> 定义
			 3)   产生一个键的方法：
							    #include <sys/ipc.h>
							    key_t ftok(const char *path, int id);
							    说明：
								 1） 按照路径名取其 stat 结构中的 st_dev和 st_ino 字段， 然后在于 id 结合起来；
			4)  关联注意：
					1> 如果key 是IPC_PRIVATE 或者和当前某种类型的IPC结构无关， 则需要指明 IPC_CREAT 标志位。
					2> 为了引用一个现有队列， key 必须等于队列 创建时 指明的 key 值，并且 IPC_CREAT必须不被指明
					3> 决不能使用IPC_PRIVATE 来引用一个现有队列， 因为这个特殊的键值总是用来创建以一个新的队列
					3> 如果要创建一个新的队列必须要使用没有引用的具有同一标识符的一个现有IPC 结构， 那么必须在flag中同时指定
					     IPC_CREAT 和 IPC_EXCL位ie
					   
	权限结构：
	
		    XSI IPC 位每一个IPC 结构关联了一个 ipc_perm  结构， 该结构规定了权限和所有者， 它至少包含下列成员：
				   struct ipc_perm{
				   uid_t 	uid;		// 所有者有效用户 ID
				   gid_t 	gid;		// 所有者有效用户组 ID
				   uid_t 	cuid;		// 创建者有效用户 ID
				   gid_t 	cgid;		// 创建者有效用户组 ID
				   mode_t mode;		// 访问模式
				   .....
				   }

消息队列：
	       
	       消息队列是一个消息的链表， 存储在内核中， 由消息队列标识符标志。
	       子进程也能继承父进程获得的 队列ID
	       
	       每一个队列都有一个 msqid_ds 结构与其相关联：
				   struct msqid_ds{
				   struct ipc_perm 	msg_perm; 		// 权限结构
				   msgqnum_t		msg_qnum;		// 队列消息数量
				   msglen_t			msg_qbytes;		// 队列消息的最大字节
				   pid_t			msg_lspid;			// 最后放入消息的进程ID
				   pid_t			msg_lrpid;			// 最后读取消息的进程ID
				   time_t			msg_stime;		// 最后的放入时间
				   time_t			msg_rtime;			// 最后的读取消息时间
				   time_t			msg_ctime;		// 最后的改变时间
				   ......
				   } ;
				   
	
			#include <sys/msg.h>
			int msgget(ket_t key, int flags);		//打开一个现有的队列 或 创建一个新的队列
			      
		
			int msgctl(int msgqid, int cmd, struct msgqid_ds *buf);		// 队列操作
				   cmd:
					     IPC_STAT: 取此队列的 msgqid_ds 结构， 并将它放入 buf 指向的结构中
					     IPC_SET :  将字段 msg_perm.uid, msg_perm.gid, msg_perm.mode 和 msg_qbyte从 buf 指向的buf 结构中
							     复制到 mspid_ds 结构
					     IPC_RMID:从系统中删除该消息队列 以及 仍在该队列中的所有数据， 这种操作即使生效
				   
			int msgsnd(int msgqid, const void * ptr, size_t nbytes, int flags); 	// 将消息插入到消息队列的末尾
				   void *ptr:(自定义)
						  struct mymesg{
						  long mtype;		// 消息类型
						  char mtext[512];	// 存放的消息数据
						  } 
				   flags:
					     IPC_NOWAIT:  类似于文件 I/O 的非阻塞 I/O 标志， 若队列已满， 则msgsng 立即出错返回 EAGAIN
					     如果没有指定 IPC_NOWAIT 在等待期间: 
								      1> 系统删除了此队列 则 返回 EIDRM 错误
								      2> 出现了信号处理 则返回 EINTR 错误
			
			ssize_t msgrcv(int msgpid, void *ptr, size_t nbytes, long type, int flags);  //从消息队列中获取数据
				   void *ptr :
						  struct mymesg{
						  long mtype;
						  char mtext[512];
						  }
				   说明：
					     type 字节可以指定想要哪一个消息：
						       type == 0	  指定队列中的第一个消息
						       type > 0	 返回队列中消息类型为 type 的第一个消息
						       type < 0 	 返回队列中消息类型小于等于 type绝对值 的消息（取消息类型最小）

信号量：

	 它是一个计数器， 用与为多个进程提供共享数据对象的访问
			 
	为了获取共享对象的操作:
	      1)   测试控制该资源的信号量
	      2） 若此信号量为正，则进程可以使用该资源，在这种情况下，进程会将信号量 减一 
	      3） 否则若此信号量为0 ， 则进程呢个进入休眠状态， 直到信号量大于0 ， 进程被唤醒
	      4） 若进程呢个不再使用由一个信号量控制的共享资源时， 该信号量值增一， 如果有进程正在休眠等待， 则唤醒
	XSI 的特性
	       1）信号来给你并非是单个非负值， 而比喻定义为含有一个或多也信号量值的集合， 当创建信号量时， 要指定集合中信号量值的数量
	       2）信号量的创建是独立于它的初始化的， 这是一个致命弱点
	       3）即使没有进程正在使用各个新是的XSI IPC ， 他们仍然是存在的
	       
	  内核为每个信号量集合维护一个 semid_ds 信号
			 struct semid_ds {
			 struct ipc_perm 		sem_perm;			// 信号量权限
			 unsigned short		sem_nsems;		// 设置的信号
			 time_t 			sem_otime;		// 最后调用 semop 的时间
			 time_t			sem_ctime;		// 最后的 变化时间
			 .....
			 }
		每个信号量都用一个 无名结构表示
		struct {
		unsigned short	semval;	// 信号值
		pid_t			sempid;	// 最后操作的进程ID
		unsigned short	semncnt;	// 等待信号来量
		unsigned short	semzcnt;	// 等待信号量为0
		}
		
		#include <sys/sem.h>
		int semget(key_t key, int nsems, int flags);		//创建一个新的信号量集 或 使用一个现有的信号量
		
		int semctl(int semid, int semnum, int cmd, .. /* union semun arg */);	// 对信号量集的操作
			 union semun{
			 int   				val
			 struct semid_ds 	*buf;
			 unsigned short 		*array;
			 }
			 
			 cmd :
				   IPC_STAT:
				   IPC_SET:
				   IPC_RMID:
				   GETVAL: 返回成员 semnum 的 semval 值
				   SERVAL： 。。。。
				   GETPID：返回成员  semnum 的 sempid 值
				   。。。。
				
		   int semop(int semid, struct sembuf semoparray[], size_t nops);
			 struct sembuf{
			      unsigned short		sem_nun;		
			      short				sem_op;
			      short				sem_flg;
			 }
			 
			 nops : 规定了概述组中操作的数量
			 sembuf.sem_op:
					1) >o : 释放的占用资源数
					2) <0 : 获取的资源数
					3) =0：等待该资源数为 0

共享存储:

	  在多个进程之间同步访问一个给定的存储区（内存中的匿名段）
	  内核为每一个共享存储段维护一个结构
	       struct shmid_ds{
	       struct ipc_perm		shm_perm;		// 共享存储的权限结构
	       size_t				shm_segsz;	// 共享存储的大小
	       pid_t				shm_lpid;		// 最后使用 shmop 的进程
	       pid_t				shm_cpid;		// 最后创建shmid_ds 的进程
	       shmatt_t			shm_nattch;	// 当前的依附数量
	       time_t				shm_atime;	// 最后的依附时间
	       time_t				shm_dtime;	// 最后的分离时间
	       time_t				shm_ctime;	// 最后的改变时间
	  }
	  
	  #include <sys/shm.h>
	  int shmget(key_t key, size_t size, int flags); // 获得一个共享存储区
	       说明：
		    通常取为系统页长的整数倍， 否则最后一页的剩余部分将无法使用
		        
	  int shmctl(int shmid, int cmd, struct shmid_ds *buf);
	       cmd:
			 IPC_STAT:
			 IPC_SET:
			 IPC_RMIT:
			 只能由超级用户执行
			 SHM_LOCK:		在内存中对共享存储段加锁
			 SHM_UNLOCK: 		在。。。。。。。。。解锁
			 
	  int *shmat(int shmid, const void *addr, int flags);	// 将共享存储段连接到进程的地址空间中
	  
	       addr 为 0：由内核选择一个可用的地址（推荐）
	       addr 非 0：自选
	    
	  int shmdt(const void *addr); //解除依附
	  
     /dev/zero 存储映射
	       性质：
			 1） 创建一个未命名的存储区， 其长度时mmap 的第二个参数， 将其向上取整为系统的最近页长， 
			 2） 存储区都初始化为 0 
			 3） 如果多个进程的共同祖先进程对mmap 指定了MAP_SHARED标志，则这些进程可共享此存储区

POSIX 信号量：

	  POSIX 信号量接口意在解决 XSI 信号量接口的几个缺陷：
		    1）POSIX 信号量考虑了更高性能的实现
		    2）POSIX 信号量接口使用更简单， 没有信号量集
		    3）POSIX 信号量在删除时表现的更完美

     命名信号量:
			 命名信号量可以通过名字访问， 因此可以被任何已知他们名字的进程中的线程使用
			 
		#include <semaphore.h>
		sem_t sem_open(const char *name, int oflag, /* mode_t mode, unsigned int value */);
			 
			 说明：
			 1）当oflag 参数有 O_CREAT 标志集时， 如果命名信号量不存在， 则创建一个新的 ； 如果它已经存在， 则会被使用
			 2）当我们指定 O_CREATE 参数时， 需要提供两个额外的参数， mode 参数指定了权限位， walue 用来指定信号量的初始值，
			 3） 名字的第一个字符应该位（/），名字不应该包含其他的(/) 信号量的名字最大长度位 _POSIX_NAME_MAX
			 
	       int sem_close(sem_t *sem);	// 释放任何信号量相关的资源
			 注意：
				   如果进程没有首先调用 sem_close 而退出， 则进程自动关闭任何打开的信号量
		
	       int sem_unlink(const char *name);
			 说明：
				   sem_unlink会马上删除指定的信号量名，但要等到所有打开该信号量的进程关闭该信号量后才删除该信号。详细地说，
				   当进程创建一个有名信号量，会在/dev/shm下生成一个sem.xxx的文件，所有打开该信号量的进程（包括创建它的进程）
				   都会增加该文件的引用计数，并且这个计数由内核管理。当调用sem_unlink时，/dev/shm下的sem.xxx文件会马上被删除，
				   但是信号量本身并没有被删除，所有已打开该信号量的进程仍能正常使用它。直到所有打开该信号量的进程关闭该信号量后，
				   内核才真正删除信号量。
			
			 // 使用信号量
	       int sem_wait(sem_t *sem);
	       int sem_trywait(sem_t *sem);
	       int sem_timewait(sem_t *restrict sem, const struct timespec *restrict tim);
			 
	       int sem_post(sem_t *sem);   // 释放信号量
			 
	未命名信号量：
	       
	       // 创建一个未命名的信号量
	       int sem_init(sem_t *sem, int pshared, unsigned int value);	
			 说明：
				   pshared 指定了是否在多个进程中使用信号量
				   
		// 如果要在两个进程中使用未命名的信号量， 需要确保 sem 参数指向了两个进程之间共享内存范围
		
		// 释放未命名的信号量
		int sem_destroy(sem_t *sem);
		
		// 检索信号量的值
		int sem_getvalue(sem_t *restrict sem, int *restrict valp);
		
