1  守护进程的特征:
     
	  说明 ： 
	       1） 父进程为0的个进程通常是内核进程 ， 他们作为系统引导装入过程的一部分而启动
	       2） init 是一个例外， 它是一个由内核在引导装入时启动的用户曾的命令， init 主要负责启动各运行层次特定的系统服务，这些服务通常时他们
		     自己拥有的守护进程上下文实现的
		     
2  编程规则
     
	  1） 调用umask 将文件模式创建屏蔽字设置为已知值， 由继承的来的文件模式创建屏蔽字可能会被设置为拒绝某些权限
	  2） 调用 fork , 然后父进程调用 exit 终止；
	  3） 子进程调用 setsid 新建 会话 ； 这时候 子进程将成为新会话的组长进程； 并且子进程成为新的进程组的组长； 没有控制终端
	  4） 调用 fork , 然后子进程终止； 所有资源由新的子进程接管（这样守护进程将不会成为会话首进程 ---- 没有进程组长）
	  5） 将当前目录改为 '\' ---------  防止文件当前工作目录位于挂在的文件系统中
	  6） 关闭不再需要的文件描述符
	  7） 某些守护进程希望打开 /dev/null 使其具有 0， 1， 2 文件描述符， 这样任何一个试图读标准输入， 写标准输出或标准错误的库历程都将不产生
		任何效果
		
3 出错记录

     产生日志消息的方法：
		    1） 内核例程可以调用log 函数。任何一个用户进程都可以通过打开并读取/dev/klog设备来读取这些消息
		    2） 大多数用户进程（守护进程）调用 syslog 函数来产生日志消息来产生日志消息。
		    3） 无论一个用户进程是在此主机上， 还是通过 TCP/IP网络连接到此主机的其他主机上，都可以将日志消息法相UDP 端口 514
		    
		说明：
			 syslogd 守护进程读取所有3种格式的日志消息， 此守护进程呢个在启动时读一个配置文件， 其文件名一般为 /etc/syslog.conf, 该文件
			 决定了不同种类的消息应送向何处
			 
		#include <syslog.h>
		void openlog(const char *ident, int option , int facility);
		void syslog(int priority, const char *format, ......);
		void closelog(void);
		int setlogmask(int maskpri);
		
	       说明 ： 调用 opendir 是可选的 , 如果不调用openlog 则在第一次调用 syslog时，自动调用openlog, 调用 closelog 也是可选择的
	       