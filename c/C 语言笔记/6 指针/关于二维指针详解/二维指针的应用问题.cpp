# include <stdio.h>
# include <stdlib.h>

int main (void)
{
	int ** p , * p2;
	int i , j , n = 0;

	p2 = (int *) malloc ( sizeof (int) * 8 );        //   malloc 为一维函数分配了空间为为 sizeof ((int) * 8 ) 个内存 
                                                     //   sizeof () 中的类型只能只决定空间大小  分配的类型由 变量本身决定
	for ( i = 1; i <= 8 ; i ++)                      //   即 可以将 sizeof () 中的 int 换成 int* 虽然这样做没有实际意义
		p2[i] = n++;                                 //   但是不能将 int 变成 char 等 因为这样就改变了每个单元的大小  即这个变量
                                                     //   就不是 int 型
	for (i = 1 ; i <= 8 ; i++ )                
		printf ("%-2d ",p2[i]);
	printf ("\n\n");

	puts ("==================================");

	p = ( int **) malloc (sizeof (int *) * 8);       // malloc 返回的是一块单元的首地址；
	
	for ( i = 1 ; i <= 8 ; i ++)                      //   在这里 ** p 是一个二维指针   p 在这里为一个变量单元名   这个变量的单元
		p[i-1] = (int *) malloc (sizeof (int) * 8);   //   存储的是 *p 的地址  因为*p 存着 **p 的地址 所以 *p 为一个指针 就相当
                                                      //   于一维数组里的 p2 一样  所以 p 中存储这是一个存储地址的变量的地址 
	for (i = 1 ; i <= 8 ; i++)                        //   （指针地址）    在这个二维数组里 它也可以说是一串一维指针 的首地址
		for (j=1 ; j <= 8 ; j++)
			p[i-1][j-1] = n++;
                                                      // 而第二次分配则将每一个指针指向一个存储数据的变量  
	for (i = 1 ; i <= 8 ; i++)
	{	for (j=1 ; j <= 8 ; j++)                      //这样就构造出了二维数组  （这是一种有整体到局部的构造思维）
			printf ("%-2d ",p[i-1][j-1]);              
		printf ("\n");
	}
	puts ("==================================");

	printf ("int * = %d\n",sizeof (int *));
	printf ("int ** = %d\n",sizeof (int **));

	printf ("**p = %d\n *p = %d\n  p = %d\n**P 的地址为 %d\n",**p , *p , p , &**p);

	for ( i = 0 ; i < 7 ; i ++)
		printf ("%d  ",&p[i]);
	printf ("\n");

	printf ("%d\n",&p);

	return 0;
}
/*
在 VC++ 6.0 中的输出结果是 ：
=======================================
0  1  2  3  4  5  6  7

==================================
8  9  10 11 12 13 14 15
16 17 18 19 20 21 22 23
24 25 26 27 28 29 30 31
32 33 34 35 36 37 38 39
40 41 42 43 44 45 46 47
48 49 50 51 52 53 54 55
56 57 58 59 60 61 62 63
64 65 66 67 68 69 70 71
==================================
int * = 4
int ** = 4
**p = 8
 *p = 3355160
  p = 3355072
**P 的地址为 3355160
3355072  3355076  3355080  3355084  3355088  3355092  3355096
1144996
Press any key to continue
================================================================
*/

