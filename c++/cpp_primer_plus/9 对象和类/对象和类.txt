1. OOP 特性：
		抽象；
		封装和数据隐藏；
		多态；
		继承；
		代码可重用性；
	

2. C++中的类的组成：
			1> 提供数据表示；  （基本的变量）
			2> 操纵数据的方法; （函数）

	定义方法：
			class classname 
			{
			    private :
					data number declarations  // 实现细节 部分  // 数据隐藏（封装） // 外部无法直接访问
	
			    public:
					member function prototypes // 公共接口部分  // 提供了用户与类的链接	
			};


	定义类：
		1> 类声明 : 以数据的方式描述数据部分，以成员函数（方法）描述接口；
		2> 类方法定义：描述如何实现类成员函数；

	注意: 
		1. 通常 C++ 程序员将接口（类定义）放在头文件中；
		2. 要注意使用 const ;


3. 指定类设计：

		
可以包括 数据成员 函数成员（声明）声明有 私有部分（私有部分成员 只能通过 成员函数 访问）
				  共有部分（构成设计的抽象部分 -- 公共接口 用于处理被封装的数据）；



		2> 实现类成员函数 ：

				在这里说明一下的就是 ， 可以在类声明是提供完整的函数定义， 而不仅仅是原型（这种做法
				   将自动转换成内联函数）
				通常情况下是单独提供函数定义 （除非函数较小）。这种情况下 ，要使用作用域解析运算符
				  （：：）来指出函数所属的类 ，例如：void Stock::angt () const;
			
				  也可定义常规函数时定义内联函数；




		3> 生成函数：
				 正确声明类对象 ， 使用类方法
							例如： Stock name;   name.angt();
		
				调用成员函数时 ， 他将被用来调用它的对象的数据成员；

				所创建的每个对象都有自己的存储空间 ，  用于存储内部变量和类成员， 但是同一个类的
				  所有成员都共享一组类方法，即每种方法只有一个副本；而所有的变量都有自己的内存空间；
				  

3. 类的 构造函数 和 析构函数：

	
	构造函数：用于对类进行初始化  （名称与类名相同）
		
		默认构造函数：
				1. 在没有提供 任何构造函数 的前提下，机器将默认进行初始化，但不提供值；
				2. 可以自定义默认构造函数；方法是：不带任何参数和返回值；

		（自主）构造函数：
				
				调用方式：
					1> 显式调用： 例如： Stock food = Stock("hellow world",250 , 1.25);	
								//	默认调用复制构造函数
	
					2> 隐式调用： 例如： Stock food ("hellow world",250 , 1.25);
							    Stock *p = new Stock ("hellow world",250 , 1.25);

							

	析构函数： 
			作用：
				删除不需要的类；

			方法： 
				类名称前加上 ~                                                                                           

			注意： 如果构造函数使用了 new ， 则必须使用 delete 的析构函数

4. this 指针：

		每一个成员函数都有一个 this 指针 用于指向 调用对象

		作用：
			用于返回本类对象时显得极为渐变  

5. 对象数组：
		注意：
			可以使用｛｝来批量初始化 ， 未显式初始化的将使用默认构造函数

6. 类作用域：

		类中定义的所用类名称包括类方法 ， 作用域为整个类；
	

		注意：

			1. 在定义成员函数是，必须使用作用域解析运算符；
			2. 在类中声明一个常量 不能使用 const 如（const int a = 10）； 因为在声明类中，并未分配内存；
			3. 声明常量可以使用 如 枚举（enum {Months = 12};）

		C++11:
		
			提供了以一种新枚举， 改变了作用域， 默认类型为 int 型

			声明方式：
				例如： enum class name {Small , Medom , Large , Xlarge};
				       使用时  要使用作用域解析运算符 ， 例如： name:: Amall;

			可改变存储类型 ：  如 short (enum class : short name {Small , Medom , Large , Xlarge});


7. 抽象数据类型：






			













			
